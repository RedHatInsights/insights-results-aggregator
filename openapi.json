{
  "openapi": "3.0.0",
  "info": {
    "title": "Insights Results Aggregator",
    "description": "Aggregation service for the results of running Insights rules.",
    "version": "1.0.0"
  },
  "paths": {
    "/openapi.json": {
      "get": {
        "summary": "Returns the OpenAPI specification JSON.",
        "operationId": "getOpenApi",
        "responses": {
          "200": {
            "description": "A JSON containing the OpenAPI specification for this service.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openapi": {
                      "type": "string"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "version": {
                          "type": "string"
                        }
                      }
                    },
                    "paths": {
                      "type": "object",
                      "description": "Available paths and their descriptions."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Read all metrics exposed by this service",
        "description": "",
        "parameters": [],
        "operationId": "getMetrics",
        "responses": {
          "200": {
            "description": "Default response containing all metrics in semi-structured text format",
            "content": {
              "text/plain": {}
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "Returns a list of available organization IDs.",
        "operationId": "getOrganizations",
        "description": "[DEBUG ONLY] List of organizations for which at least one Insights report is available via the API.",
        "responses": {
          "200": {
            "description": "A JSON array of organization IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": 0
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "debug"
        ]
      }
    },
    "/organizations/{orgId}/clusters": {
      "get": {
        "summary": "Returns a list of clusters associated with the specified organization ID.",
        "operationId": "getClustersForOrganization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "ID of the requested organization.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of clusters that belong to the specified organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "clusters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 36,
                        "maxLength": 36,
                        "format": "uuid"
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "prod"
        ]
      }
    },
    "/report/{orgId}/{clusterId}": {
      "get": {
        "summary": "Returns the latest report for the given organization and cluster which contains information about rules that were hit by the cluster.",
        "operationId": "getReportForCluster",
        "description": "The report is specified by the organization ID and the cluster ID. The latest report available for the given combination will be returned.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest available report for the given organization and cluster combination. Returns rules and their descriptions that were hit by the cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "report": {
                      "type": "object",
                      "properties": {
                        "meta": {
                          "type": "object",
                          "properties": {
                            "count": {
                              "type": "integer",
                              "description": "Number of rules that were hit by the cluster. -1 is returned when no rules are defined for the cluster.",
                              "example": "1"
                            },
                            "last_checked_at": {
                              "type": "string",
                              "format": "date",
                              "example": "2020-01-23T16:15:59.478901889Z"
                            }
                          }
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "The title of the rule, a short description.",
                                "example": "Authentication operator is degraded while having a cluster wide proxy configured"
                              },
                              "details": {
                                "type": "string",
                                "description": "Details of the rule - templates rendered on frontend."
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date",
                                "example": "2020-01-02T16:15:59.478901889Z"
                              },
                              "total_risk": {
                                "type": "integer",
                                "description": "Total risk - calculated from rule impact and likelihood.",
                                "enum": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4
                                ]
                              },
                              "risk_of_change": {
                                "type": "integer",
                                "description": "Risk of change - values paired with corresponding UI elements. 0 returned when not defined, therefore to hide the UI.",
                                "enum": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "prod"
        ]
      }
    },
    "/clusters/{clusterId}/rules/{ruleId}/like": {
      "put": {
        "summary": "Puts like for the rule with cluster for current user",
        "operationId": "addLikeToRule",
        "description": "Puts like for the rule(ruleId) with cluster(clusterId) for current user(from auth token)",
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "prod"
        ]
      }
    },
    "/clusters/{clusterId}/rules/{ruleId}/dislike": {
      "put": {
        "summary": "Puts dislike for the rule with cluster for current user",
        "operationId": "addDislikeToRule",
        "description": "Puts dislike for the rule(ruleId) with cluster(clusterId) for current user(from auth token)",
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "prod"
        ]
      }
    },
    "/clusters/{clusterId}/rules/{ruleId}/reset_vote": {
      "put": {
        "summary": "Resets vote for the rule with cluster for current user",
        "operationId": "resetVoteForRule",
        "description": "Resets vote for the rule(ruleId) with cluster(clusterId) for current user(from auth token)",
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "prod"
        ]
      }
    },
    "/clusters/{clusterId}/rules/{ruleId}/get_vote": {
      "get": {
        "summary": "Returns vote for the rule with cluster for current user",
        "operationId": "getVoteForRule",
        "description": "[DEBUG ONLY] Returns vote for the rule(ruleId) with cluster(clusterId) for current user(from auth token)",
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "vote": {
                      "type": "integer",
                      "example": "1"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "debug"
        ]
      }
    },
    "/organizations/{orgIds}": {
      "delete": {
        "summary": "Deletes organization data from database.",
        "operationId": "deleteOrganizations",
        "description": "[DEBUG ONLY] All database entries related to the specified organization IDs will be deleted.",
        "parameters": [
          {
            "name": "orgIds",
            "in": "path",
            "required": true,
            "description": "IDs of the organizations whose data are supposed to be deleted.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          }
        },
        "tags": [
          "debug"
        ]
      }
    },
    "/clusters/{clusterIds}": {
      "delete": {
        "summary": "Deletes cluster data from database.",
        "operationId": "deleteClusters",
        "description": "[DEBUG ONLY] All database entries related to the specified cluster IDs will be deleted.",
        "parameters": [
          {
            "name": "clusterIds",
            "in": "path",
            "required": true,
            "description": "IDs of the clusters whose data are supposed to be deleted.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          }
        },
        "tags": [
          "debug"
        ]
      }
    },
    "/rules/{ruleId}": {
      "post": {
        "summary": "Creates or updates rule with provided ruleId",
        "operationId": "createOrUpdateRule",
        "description": "[DEBUG ONLY] Creates or updates rule with provided data in body",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "ID of the rule to be created or updated",
            "schema": {
              "type": "string",
              "example": "some.python.module"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "debug"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "description": "Rule data",
          "required": true
        }
      },
      "delete": {
        "summary": "Deletes a rule with provided ruleId",
        "operationId": "deleteRule",
        "description": "[DEBUG ONLY] Deletes a rule with provided ruleId",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "ID of the rule to be deleted",
            "schema": {
              "type": "string",
              "example": "some.python.module"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "debug"
        ]
      }
    },
    "/rules/{ruleId}/error_keys/{errorKey}": {
      "post": {
        "summary": "Creates or updates rule_error_key with provided ruleId and errorKey",
        "operationId": "createOrUpdateRuleErrorKey",
        "description": "[DEBUG ONLY] Creates or updates rule_error_key with provided data in body",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "ID of the rule to be created or updated",
            "schema": {
              "type": "string",
              "example": "some.python.module"
            }
          },
          {
            "name": "errorKey",
            "in": "path",
            "required": true,
            "description": "errorKey to be created",
            "schema": {
              "type": "string",
              "example": "ek"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "debug"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "description": "Rule error key data",
          "required": true
        }
      },
      "delete": {
        "summary": "Deletes rule_error_key with provided ruleId and errorKey",
        "operationId": "deleteRuleErrorKey",
        "description": "[DEBUG ONLY] Deletes rule_error_key with provided ruleId and errorKey",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "ID of the rule to be created or updated",
            "schema": {
              "type": "string",
              "example": "some.python.module"
            }
          },
          {
            "name": "errorKey",
            "in": "path",
            "required": true,
            "description": "errorKey to be created",
            "schema": {
              "type": "string",
              "example": "ek"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule",
          "debug"
        ]
      }
    }
  }
}
