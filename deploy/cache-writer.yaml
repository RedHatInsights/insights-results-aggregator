# Copyright 2023 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: Template
metadata:
  name: ccx-cache-writer
objects:
# TODO: Add the cache-writer deployment + services
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: ccx-cache-writer
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "This app doesn't have that much traffic"
  spec:
    envName: ${ENV_NAME}
    testing:
      iqePlugin: ccx
    deployments:
      - name: db-writer
        minReplicas: ${{CACHE_WRITER_REPLICAS}}
        webServices:
          public:
            enabled: false
          private:
            enabled: false
          metrics:
            enabled: true
        podSpec:
          env:
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__ADDRESS
              value: "${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__TIMEOUT
              value: "${KAFKA_TIMEOUT}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__TOPIC
              value: "${INCOMING_TOPIC}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__DEAD_LETTER_QUEUE_TOPIC
              value: ""
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__PAYLOAD_TRACKER_TOPIC
              value: "${PAYLOAD_TRACKER_TOPIC}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__SERVICE_NAME
              value: "${CACHE_WRITER_SERVICE_NAME}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__GROUP
              value: "${GROUP_ID}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__ENABLED
              value: "true"
            - name: INSIGHTS_RESULTS_AGGREGATOR__BROKER__ENABLE_ORG_WHITELIST
              value: "false"
            - name: INSIGHTS_RESULTS_AGGREGATOR__CONTENT__PATH
              value: "/rules-content"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__ADDRESS
              value: ":9000"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__API_PREFIX
              value: "${CW_API_PREFIX}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__API_SPEC_FILE
              value: "/openapi/openapi.json"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__DEBUG
              value: "${DEBUG}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__AUTH
              value: "${AUTH}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__SERVER__AUTH_TYPE
              value: "xrh"
            - name: INSIGHTS_RESULTS_AGGREGATOR__PROCESSING__ORG_WHITELIST_FILE
              value: "/data/org_whitelist.csv"
            - name: INSIGHTS_RESULTS_AGGREGATOR__METRICS__ENABLED
              value: "true"
            - name: INSIGHTS_RESULTS_AGGREGATOR__STORAGE__TYPE
              value: redis
            - name: INSIGHTS_RESULTS_AGGREGATOR__REDIS__DATABASE
              value: "${REDIS_DATABASE}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__REDIS__ENDPOINT
              value: "${REDIS_ENDPOINT}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__REDIS__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cache-writer-redis-credentials
                  key: password
            - name: INSIGHTS_RESULTS_AGGREGATOR__REDIS__TIMEOUT_SECONDS
              value: "${REDIS_TIMEOUT_SECONDS}"
            - name: INSIGHTS_RESULTS_AGGREGATOR__LOGGING__LOG_LEVEL
              value: ${LOG_LEVEL}
            - name: INSIGHTS_RESULTS_AGGREGATOR__LOGGING__DEBUG
              value: ${DEBUG}
            - name: INSIGHTS_RESULTS_AGGREGATOR__LOGGING__LOGGING_TO_CLOUD_WATCH_ENABLED
              value: ${CLOUDWATCH_ENABLED}
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__DEBUG
              value: ${CLOUDWATCH_DEBUG}
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__STREAM_NAME
              value: ${CW_LOG_STREAM}
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__CREATE_STREAM_IF_NOT_EXISTS
              value: ${CREATE_STREAM_IF_NOT_EXISTS}
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_region
                  optional: true
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__LOG_GROUP
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: log_group_name
                  optional: true
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__AWS_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_access_key_id
                  optional: true
            - name: INSIGHTS_RESULTS_AGGREGATOR__CLOUDWATCH__AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_secret_access_key
                  optional: true
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: "${CW_API_PREFIX}metrics"
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: "${CW_API_PREFIX}metrics"
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
          resources:
            limits:
              cpu: ${CACHE_WRITER_CPU_LIMIT}
              memory: ${CACHE_WRITER_MEMORY_LIMIT}
            requests:
              cpu: ${CACHE_WRITER_CPU_REQUEST}
              memory: ${CACHE_WRITER_MEMORY_REQUEST}
    kafkaTopics:
      - replicas: 3
        partitions: 1
        topicName: ${INCOMING_TOPIC}
      - replicas: 3
        partitions: 1
        topicName: ${PAYLOAD_TRACKER_TOPIC}
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9000"
      prometheus.io/scheme: http
      prometheus.io/scrape: "true"
    name: ccx-cache-writer-prometheus-exporter
    labels:
      app: ccx-cache-writer
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: db-writer
  spec:
    ports:
      - name: ccx-cache-writer-port-metrics
        port: 9000
        protocol: TCP
        targetPort: 9000
    selector:
      pod: ccx-cache-writer-db-writer

# Redis instance (https://github.com/openshift-assisted/assisted-events-stream/blob/master/openshift/template.yaml)
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "It can be problematic if we add more replicas and it's enough as it is now"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ccx-data-pipeline
        app.kubernetes.io/instance: cache-writer
        app.kubernetes.io/name: redis
    serviceName: ccx-redis-headless
    template:
      metadata:
        labels:
          app: ccx-data-pipeline
          app.kubernetes.io/instance: cache-writer
          app.kubernetes.io/name: redis
      spec:
        affinity:
          podAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: ccx-data-pipeline
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - -c
          - /opt/bitnami/scripts/start-scripts/start-master.sh
          command:
          - /bin/bash
          env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: REDIS_REPLICATION_MODE
            value: master
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: ${REDIS_CREDENTIALS_SECRETNAME}
          - name: REDIS_TLS_ENABLED
            value: "no"
          - name: REDIS_PORT
            value: "6379"
          image: ${REDIS_IMAGE_NAME}:${REDIS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_liveness_local.sh 5
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 6
          name: redis
          ports:
          - containerPort: 6379
            name: redis
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 1
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              cpu: ${REDIS_CPU_LIMIT}
              memory: ${REDIS_MEMORY_LIMIT}
            requests:
              cpu: ${REDIS_CPU_REQUEST}
              memory: ${REDIS_MEMORY_REQUEST}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
          - mountPath: /opt/bitnami/scripts/start-scripts
            name: start-scripts
          - mountPath: /health
            name: health
          - mountPath: /data
            name: ccx-redis-data
            subPath: null
          - mountPath: /opt/bitnami/redis/mounted-etc
            name: config
          - mountPath: /opt/bitnami/redis/etc/
            name: redis-tmp-conf
          - mountPath: /tmp
            name: tmp
        - command:
          - /bin/bash
          - -c
          - |
            if [[ -f '/secrets/redis-password' ]]; then
            export REDIS_PASSWORD=$(cat /secrets/redis-password)
            fi
            redis_exporter
          env:
          - name: REDIS_ALIAS
            value: ccx-redis
          - name: REDIS_USER
            value: default
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: ${REDIS_CREDENTIALS_SECRETNAME}
          image: ${REDIS_EXPORTER_IMAGE_NAME}:${REDIS_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: metrics
          ports:
          - containerPort: 9121
            name: metrics
          resources:
            limits:
              cpu: ${REDIS_METRICS_CPU_LIMIT}
              memory: ${REDIS_METRICS_MEMORY_LIMIT}
            requests:
              cpu: ${REDIS_METRICS_CPU_REQUEST}
              memory: ${REDIS_METRICS_MEMORY_REQUEST}
          securityContext:
            runAsNonRoot: true
          volumeMounts: null
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 493
            name: ccx-redis-scripts
          name: start-scripts
        - configMap:
            defaultMode: 493
            name: ccx-redis-health
          name: health
        - configMap:
            name: ccx-redis-configuration
          name: config
        - emptyDir: {}
          name: redis-tmp-conf
        - emptyDir: {}
          name: tmp
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        labels:
          app: ccx-data-pipeline
          app.kubernetes.io/instance: cache-writer
          app.kubernetes.io/name: redis
        name: ccx-redis-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${REDIS_STORAGE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis-metrics
  spec:
    ports:
    - name: ccx-redis-port-metrics
      port: 9121
      protocol: TCP
      targetPort: metrics
    selector:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis
  spec:
    internalTrafficPolicy: Cluster
    ports:
    - name: tcp-redis
      nodePort: null
      port: 6379
      targetPort: redis
    selector:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis-headless
  spec:
    clusterIP: None
    ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
    selector:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    type: ClusterIP
- apiVersion: v1
  data:
    start-master.sh: |
      #!/bin/bash

      [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
      if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
          cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
      fi
      if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
          cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
      fi
      ARGS=("--port" "${REDIS_PORT}")
      ARGS+=("--requirepass" "${REDIS_PASSWORD}")
      ARGS+=("--masterauth" "${REDIS_PASSWORD}")
      ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
      ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
      exec redis-server "${ARGS[@]}"
  kind: ConfigMap
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis-scripts
- apiVersion: v1
  data:
    ping_liveness_local.sh: |-
      #!/bin/bash

      [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
      [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h localhost \
          -p $REDIS_PORT \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
      if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
        echo "$response"
        exit 1
      fi
    ping_liveness_local_and_master.sh: |-
      script_dir="$(dirname "$0")"
      exit_status=0
      "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
      "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
      exit $exit_status
    ping_liveness_master.sh: |-
      #!/bin/bash

      [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
      [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h $REDIS_MASTER_HOST \
          -p $REDIS_MASTER_PORT_NUMBER \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
      if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
        echo "$response"
        exit 1
      fi
    ping_readiness_local.sh: |-
      #!/bin/bash

      [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
      [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h localhost \
          -p $REDIS_PORT \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      if [ "$response" != "PONG" ]; then
        echo "$response"
        exit 1
      fi
    ping_readiness_local_and_master.sh: |-
      script_dir="$(dirname "$0")"
      exit_status=0
      "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
      "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
      exit $exit_status
    ping_readiness_master.sh: |-
      #!/bin/bash

      [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
      [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
      response=$(
        timeout -s 3 $1 \
        redis-cli \
          -h $REDIS_MASTER_HOST \
          -p $REDIS_MASTER_PORT_NUMBER \
          ping
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      if [ "$response" != "PONG" ]; then
        echo "$response"
        exit 1
      fi
  kind: ConfigMap
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis-health
- apiVersion: v1
  data:
    master.conf: |-
      dir /data
      # User-supplied master configuration:
      rename-command FLUSHDB ""
      rename-command FLUSHALL ""
      # End of master configuration
    redis.conf: |-
      # User-supplied common configuration:
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly yes
      # Disable RDB persistence, AOF persistence already enabled.
      save ""
      # End of common configuration
    replica.conf: |-
      dir /data
      slave-read-only yes
      # User-supplied replica configuration:
      rename-command FLUSHDB ""
      rename-command FLUSHALL ""
      # End of replica configuration
  kind: ConfigMap
  metadata:
    labels:
      app: ccx-data-pipeline
      app.kubernetes.io/instance: cache-writer
      app.kubernetes.io/name: redis
    name: ccx-redis-configuration

parameters:
# cache-writer
- description: Env Name
  name: ENV_NAME
  required: true
- description: Image name
  name: IMAGE
  value: quay.io/cloudservices/insights-results-aggregator
- description: Image tag
  name: IMAGE_TAG
  required: true
- name: CACHE_WRITER_REPLICAS
  description: The number of replicas to use for the ccx-cache-writer deployment
  value: "1"
- name: KAFKA_BOOTSTRAP_HOST
  required: true
  value: mq-kafka
- name: KAFKA_BOOTSTRAP_PORT
  required: true
  value: "29092"
- name: KAFKA_TIMEOUT
  value: 300s
- name: INCOMING_TOPIC
  value: ccx.ocp.results
  required: true
- name: PAYLOAD_TRACKER_TOPIC
  value: platform.payload-status
  required: true
- name: CACHE_WRITER_SERVICE_NAME
  value: ccx-cache-writer
  required: true
- name: GROUP_ID
  value: ccx_cache_writer_app
  required: true
- name: CW_API_PREFIX
  required: true
  value: /
- name: LOG_LEVEL
  value: "DEBUG"
- name: DEBUG
  value: "true"
- name: AUTH
  value: "false"
- name: REDIS_DATABASE
  value: "0"
  required: true
- name: REDIS_ENDPOINT
  value: "ccx-redis:6379"
  required: true
- name: REDIS_TIMEOUT_SECONDS
  value: "30"
  required: true
- name: CLOUDWATCH_DEBUG
  value: "false"
  required: true
- name: CLOUDWATCH_ENABLED
  value: "true"
  required: true
- name: CW_LOG_STREAM
  value: $HOSTNAME
- name: CREATE_STREAM_IF_NOT_EXISTS
  value: "true"
- name: CACHE_WRITER_CPU_LIMIT
  value: 200m
- name: CACHE_WRITER_MEMORY_LIMIT
  value: 400Mi
- name: CACHE_WRITER_CPU_REQUEST
  value: 100m
- name: CACHE_WRITER_MEMORY_REQUEST
  value: 200Mi
# redis
- name: REDIS_EXPORTER_IMAGE_TAG
  value: 1.37.0-debian-10-r63
- name: REDIS_EXPORTER_IMAGE_NAME
  value: quay.io/edge-infrastructure/redis-exporter
- name: REDIS_IMAGE_TAG
  value: 6.2.7-debian-10-r23
- name: REDIS_IMAGE_NAME
  value: quay.io/edge-infrastructure/redis
- name: REDIS_STORAGE
  value: 100Gi
- name: REDIS_CREDENTIALS_SECRETNAME
  value: cache-writer-redis-credentials
- name: REDIS_CPU_LIMIT
  value: 200m
- name: REDIS_MEMORY_LIMIT
  value: 1500Mi
- name: REDIS_CPU_REQUEST
  value: 100m
- name: REDIS_MEMORY_REQUEST
  value: 1000Mi
- name: REDIS_METRICS_CPU_LIMIT
  value: 10m
- name: REDIS_METRICS_MEMORY_LIMIT
  value: 100Mi
- name: REDIS_METRICS_CPU_REQUEST
  value: 5m
- name: REDIS_METRICS_MEMORY_REQUEST
  value: 50Mi
